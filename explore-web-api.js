// explore-web-api.js
// Anv√§nd Playwright f√∂r att logga in via webbgr√§nssnittet och unders√∂ka API-anrop

const { chromium } = require("playwright");

async function exploreWebAPI() {
  let browser;
  try {
    console.log(
      "üåê Startar browser f√∂r att logga in via webbgr√§nssnittet...\n"
    );

    browser = await chromium.launch({
      headless: false, // Visa browser f√∂r att se vad som h√§nder
      args: ["--no-sandbox", "--disable-setuid-sandbox"],
    });

    const context = await browser.newContext();
    const page = await context.newPage();

    // Lyssna p√• alla network requests
    const apiCalls = [];
    page.on("request", (request) => {
      const url = request.url();
      if (url.includes("/api/") || url.includes("/services/")) {
        apiCalls.push({
          url: url,
          method: request.method(),
          headers: request.headers(),
        });
      }
    });

    // G√• till ATG:s startsida
    console.log("üîç G√•r till ATG:s startsida...");
    await page.goto("https://www.atg.se");
    await page.waitForTimeout(2000);

    // Klicka p√• inloggning
    console.log("üîê Klickar p√• inloggning...");
    try {
      await page.click("text=Logga in");
      await page.waitForTimeout(1000);
    } catch (error) {
      console.log(
        "‚ö†Ô∏è Kunde inte hitta inloggningsknapp, f√∂rs√∂ker andra s√§tt..."
      );
      // F√∂rs√∂k andra s√§tt att hitta inloggning
      const loginSelectors = [
        'a[href*="login"]',
        'button:has-text("Logga in")',
        '[data-testid*="login"]',
        ".login",
        "#login",
      ];

      for (const selector of loginSelectors) {
        try {
          await page.click(selector);
          await page.waitForTimeout(1000);
          break;
        } catch (e) {
          // Forts√§tt med n√§sta selector
        }
      }
    }

    // Fyll i inloggningsuppgifter
    console.log("üìù Fyller i inloggningsuppgifter...");
    try {
      await page.fill(
        'input[name="username"], input[name="email"], input[type="email"]',
        "jesSjo680"
      );
      await page.fill(
        'input[name="password"], input[type="password"]',
        "Jeppe1599"
      );
      await page.waitForTimeout(1000);

      // Klicka p√• inloggningsknapp
      await page.click(
        'button[type="submit"], button:has-text("Logga in"), input[type="submit"]'
      );
      await page.waitForTimeout(3000);

      console.log("‚úÖ Inloggning genomf√∂rd!");
    } catch (error) {
      console.log("‚ö†Ô∏è Kunde inte fylla i inloggningsformul√§r:", error.message);
    }

    // G√• till V75-sidan
    console.log("üèá G√•r till V75-sidan...");
    try {
      await page.goto("https://www.atg.se/spel/2025-09-06/V75/jagersro");
      await page.waitForTimeout(3000);

      console.log("‚úÖ V75-sidan laddad!");

      // Klicka p√• f√∂rsta avdelningen f√∂r att se detaljerad data
      console.log("üîç Klickar p√• f√∂rsta avdelningen...");
      try {
        await page.click(
          'a[href*="avd/1"], [data-testid*="division-1"], .division-1'
        );
        await page.waitForTimeout(2000);

        console.log("‚úÖ F√∂rsta avdelningen laddad!");

        // Klicka p√• en h√§st f√∂r att se detaljerad data
        console.log("üêé Klickar p√• f√∂rsta h√§sten...");
        try {
          await page.click('[data-testid*="horse"], .horse-row, tr:has(td)');
          await page.waitForTimeout(2000);

          console.log("‚úÖ H√§stdetaljer laddade!");
        } catch (error) {
          console.log("‚ö†Ô∏è Kunde inte klicka p√• h√§st:", error.message);
        }
      } catch (error) {
        console.log("‚ö†Ô∏è Kunde inte klicka p√• avdelning:", error.message);
      }
    } catch (error) {
      console.log("‚ö†Ô∏è Kunde inte ladda V75-sidan:", error.message);
    }

    // Visa alla API-anrop som gjordes
    console.log("\nüìä API-anrop som gjordes:");
    console.log(`Totalt ${apiCalls.length} API-anrop hittades:`);

    for (let i = 0; i < apiCalls.length; i++) {
      const call = apiCalls[i];
      console.log(`\n${i + 1}. ${call.method} ${call.url}`);

      // Visa headers som kan vara viktiga
      const importantHeaders = [
        "authorization",
        "cookie",
        "x-auth-token",
        "x-api-key",
      ];
      const relevantHeaders = Object.entries(call.headers)
        .filter(([key, value]) => importantHeaders.includes(key.toLowerCase()))
        .reduce((obj, [key, value]) => ({ ...obj, [key]: value }), {});

      if (Object.keys(relevantHeaders).length > 0) {
        console.log(`   Headers:`, relevantHeaders);
      }
    }

    // V√§nta lite f√∂r att se resultatet
    console.log("\n‚è≥ V√§ntar 5 sekunder f√∂r att se resultatet...");
    await page.waitForTimeout(5000);
  } catch (error) {
    console.log(`üí• Fel: ${error.message}`);
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

exploreWebAPI();
