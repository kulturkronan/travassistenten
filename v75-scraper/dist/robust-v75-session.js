import { chromium } from "playwright";
import * as fs from 'fs';
async function robustV75Session() {
    let browser = null;
    const v75Data = {
        date: "2025-09-13",
        track: "Bolln√§s",
        races: []
    };
    // Ladda befintlig data om den finns
    const dataFile = 'v75-progress-data.json';
    if (fs.existsSync(dataFile)) {
        try {
            const existingData = JSON.parse(fs.readFileSync(dataFile, 'utf8'));
            v75Data.races = existingData.races || [];
            console.log(`üìÇ Laddade befintlig data med ${v75Data.races.length} avdelningar`);
        }
        catch (error) {
            console.log("üìÇ Ingen befintlig data hittades, b√∂rjar fr√•n b√∂rjan");
        }
    }
    try {
        console.log("üéØ ROBUST V75-DATA SESSION");
        console.log("===========================");
        console.log("üìã Instruktioner:");
        console.log("   1. En browser √∂ppnas nu");
        console.log("   2. Logga in med: jesSjo680 / Jeppe1599");
        console.log("   3. G√• till V75-sidan");
        console.log("   4. F√∂r varje avdelning (1-7):");
        console.log("      - Kolla vilka h√§star som √§r strukna");
        console.log("      - Klicka p√• h√§star f√∂r att se historisk data");
        console.log("      - Tryck ENTER n√§r du √§r klar med avdelningen");
        console.log("   5. Data sparas automatiskt efter varje avdelning");
        console.log("   6. St√§ng browsern n√§r du √§r helt klar");
        console.log("");
        browser = await chromium.launch({
            headless: false,
            args: ["--no-sandbox", "--disable-setuid-sandbox"],
        });
        const page = await browser.newPage();
        await page.setViewportSize({ width: 1920, height: 1080 });
        console.log("üåê √ñppnar ATG inloggningssida...");
        await page.goto("https://www.atg.se/logga-in", {
            waitUntil: "domcontentloaded",
            timeout: 60000,
        });
        console.log("‚úÖ Inloggningssida laddad!");
        console.log("üë§ Anv√§ndarnamn: jesSjo680");
        console.log("üîë L√∂senord: Jeppe1599");
        console.log("");
        console.log("üìã VAD DU SKA G√ñRA:");
        console.log("   1. Logga in med uppgifterna ovan");
        console.log("   2. G√• till V75-sidan (https://www.atg.se/spel/v75)");
        console.log("   3. F√∂r varje avdelning:");
        console.log("      - Kolla vilka h√§star som √§r strukna");
        console.log("      - Klicka p√• h√§star f√∂r historisk data");
        console.log("      - Tryck ENTER n√§r avdelningen √§r klar");
        console.log("   4. Data sparas automatiskt efter varje avdelning");
        console.log("   5. St√§ng browsern n√§r alla 7 avdelningar √§r klara");
        console.log("");
        // Ta screenshot av inloggningssidan
        await page.screenshot({ path: "login-page-robust.png" });
        console.log("üì∏ Screenshot sparad som login-page-robust.png");
        // V√§nta p√• att anv√§ndaren ska logga in och komma till V75-sidan
        console.log("‚è≥ V√§ntar p√• att du ska logga in och komma till V75-sidan...");
        console.log("   (Tryck ENTER n√§r du √§r p√• V75-sidan och redo att b√∂rja)");
        // V√§nta p√• f√∂rsta ENTER (n√§r anv√§ndaren √§r p√• V75-sidan)
        await new Promise((resolve) => {
            process.stdin.once('data', () => {
                console.log("‚úÖ Anv√§ndaren √§r redo att b√∂rja med avdelningarna!");
                resolve(void 0);
            });
        });
        // Nu g√•r vi igenom varje avdelning
        for (let avdelning = 1; avdelning <= 7; avdelning++) {
            // Hoppa √∂ver avdelningar som redan √§r klara
            if (v75Data.races.some(race => race.raceNumber === avdelning)) {
                console.log(`‚è≠Ô∏è  Avdelning ${avdelning} redan klar, hoppar √∂ver`);
                continue;
            }
            console.log("");
            console.log(`üèÅ AVDELNING ${avdelning}/7`);
            console.log("========================");
            console.log("üìã Vad du ska g√∂ra:");
            console.log(`   1. G√• till avdelning ${avdelning}`);
            console.log("   2. Kolla vilka h√§star som √§r strukna");
            console.log("   3. Klicka p√• h√§star f√∂r att se historisk data");
            console.log("   4. Anteckna all viktig information");
            console.log("   5. Tryck ENTER n√§r du √§r klar med denna avdelning");
            console.log("");
            try {
                // Ta screenshot av avdelningen
                await page.screenshot({ path: `avdelning-${avdelning}-start.png` });
                console.log(`üì∏ Screenshot av avdelning ${avdelning} sparad`);
                // V√§nta p√• ENTER f√∂r denna avdelning
                await new Promise((resolve) => {
                    process.stdin.once('data', () => {
                        console.log(`‚úÖ Avdelning ${avdelning} klar!`);
                        resolve(void 0);
                    });
                });
                // H√§mta data fr√•n denna avdelning
                console.log(`üîç H√§mtar data fr√•n avdelning ${avdelning}...`);
                const raceData = await page.evaluate((raceNum) => {
                    const bodyText = document.body.innerText;
                    // S√∂k efter h√§stdata f√∂r denna avdelning
                    const horsePattern = /\d+\s+([A-Z√Ö√Ñ√ñ][a-z√•√§√∂\s]+)/g;
                    const horses = [];
                    let match;
                    while ((match = horsePattern.exec(bodyText)) !== null) {
                        horses.push(match[1].trim());
                    }
                    // S√∂k efter strukna h√§star
                    const scratchedPattern = /(struken|avst√§ngd|ej startar|startar inte)/gi;
                    const scratchedMatches = bodyText.match(scratchedPattern);
                    // S√∂k efter h√§stnamn med mer detaljerad parsing
                    const detailedHorsePattern = /(\d+)\s+([A-Z√Ö√Ñ√ñ][a-z√•√§√∂\s]+)\s+([A-Z√Ö√Ñ√ñ][a-z√•√§√∂\s]+)/g;
                    const detailedHorses = [];
                    let detailedMatch;
                    while ((detailedMatch = detailedHorsePattern.exec(bodyText)) !== null) {
                        detailedHorses.push({
                            number: detailedMatch[1],
                            name: detailedMatch[2],
                            driver: detailedMatch[3]
                        });
                    }
                    return {
                        horsesFound: horses.length,
                        detailedHorsesFound: detailedHorses.length,
                        scratchedFound: scratchedMatches ? scratchedMatches.length : 0,
                        horses: horses.slice(0, 20),
                        detailedHorses: detailedHorses.slice(0, 10),
                        bodyTextLength: bodyText.length,
                        currentUrl: window.location.href
                    };
                }, avdelning);
                console.log(`üìä Data fr√•n avdelning ${avdelning}:`);
                console.log(`   üêé H√§star hittade: ${raceData.horsesFound}`);
                console.log(`   üêé Detaljerade h√§star: ${raceData.detailedHorsesFound}`);
                console.log(`   ‚ùå Strukna h√§star: ${raceData.scratchedFound}`);
                console.log(`   üîó URL: ${raceData.currentUrl}`);
                if (raceData.detailedHorses.length > 0) {
                    console.log(`   üêé H√§star i avdelning ${avdelning}:`);
                    raceData.detailedHorses.forEach((horse, index) => {
                        console.log(`      ${index + 1}. ${horse.number} - ${horse.name} - ${horse.driver}`);
                    });
                }
                // Skapa race-objekt f√∂r denna avdelning
                const race = {
                    raceNumber: avdelning,
                    title: `V75 Avdelning ${avdelning}`,
                    distance: "2640 m",
                    trackType: "volte",
                    horses: raceData.detailedHorses.map(horse => ({
                        number: parseInt(horse.number),
                        name: horse.name,
                        driver: horse.driver,
                        track: parseInt(horse.number),
                        record: "1.14,0", // Placeholder
                        prizeMoney: 100000, // Placeholder
                        v75Percent: 6.25, // Placeholder
                        trendPercent: 0, // Placeholder
                        vOdds: 16.0, // Placeholder
                        pOdds: 16.0, // Placeholder
                        shoes: "CC", // Placeholder
                        wagon: "VA", // Placeholder
                        scratched: false, // Placeholder - du f√•r uppdatera detta manuellt
                        historicalData: null // Placeholder f√∂r historisk data
                    }))
                };
                v75Data.races.push(race);
                // Spara data efter varje avdelning
                fs.writeFileSync(dataFile, JSON.stringify(v75Data, null, 2));
                console.log(`üíæ Data sparad efter avdelning ${avdelning}`);
                // Ta screenshot efter avdelningen
                await page.screenshot({ path: `avdelning-${avdelning}-slut.png` });
                console.log(`üì∏ Screenshot efter avdelning ${avdelning} sparad`);
            }
            catch (error) {
                console.error(`‚ùå Fel vid avdelning ${avdelning}:`, error);
                // Forts√§tt med n√§sta avdelning √§ven om denna misslyckades
            }
        }
        console.log("");
        console.log("üéâ ALLA AVDELNINGAR KLARA!");
        console.log("==========================");
        console.log("üìä SAMMANFATTNING:");
        console.log(`   üèÅ Totalt avdelningar: ${v75Data.races.length}`);
        console.log(`   üêé Totalt h√§star: ${v75Data.races.reduce((sum, race) => sum + race.horses.length, 0)}`);
        // Visa alla h√§star fr√•n alla avdelningar
        v75Data.races.forEach(race => {
            console.log(`   üèÅ Avdelning ${race.raceNumber}: ${race.horses.length} h√§star`);
            race.horses.forEach(horse => {
                console.log(`      ${horse.number}. ${horse.name} - ${horse.driver}`);
            });
        });
        // Spara final data
        fs.writeFileSync('v75-complete-data.json', JSON.stringify(v75Data, null, 2));
        console.log("üíæ Final data sparad som v75-complete-data.json");
        console.log("");
        console.log("‚úÖ Session slutf√∂rd!");
        console.log("üìÅ Screenshots sparade:");
        console.log("   - login-page-robust.png");
        for (let i = 1; i <= 7; i++) {
            console.log(`   - avdelning-${i}-start.png`);
            console.log(`   - avdelning-${i}-slut.png`);
        }
    }
    catch (error) {
        console.error("‚ùå Fel vid robust V75-session:", error);
    }
    finally {
        console.log("üîí Browser kommer att st√§ngas om 5 sekunder...");
        await new Promise(resolve => setTimeout(resolve, 5000));
        if (browser) {
            await browser.close();
            console.log("‚úÖ Browser st√§ngd");
        }
    }
}
robustV75Session();
//# sourceMappingURL=robust-v75-session.js.map